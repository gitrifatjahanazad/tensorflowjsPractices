{"version":3,"sources":["data.js","script.js"],"names":["IMAGE_SIZE","NUM_CLASSES","NUM_DATASET_ELEMENTS","TRAIN_TEST_RATIO","NUM_TRAIN_ELEMENTS","Math","floor","NUM_TEST_ELEMENTS","MNIST_IMAGES_SPRITE_PATH","MNIST_LABELS_PATH","MnistData","shuffledTrainIndex","shuffledTestIndex","img","Image","canvas","document","createElement","ctx","getContext","imgRequest","Promise","resolve","reject","crossOrigin","onload","width","naturalWidth","height","naturalHeight","datasetBytesBuffer","ArrayBuffer","chunkSize","i","datasetBytesView","Float32Array","drawImage","imageData","getImageData","j","data","length","datasetImages","src","labelsRequest","fetch","all","imgResponse","labelsResponse","Uint8Array","arrayBuffer","datasetLabels","trainIndices","tf","util","createShuffledIndices","testIndices","trainImages","slice","testImages","trainLabels","testLabels","batchSize","nextBatch","index","batchImagesArray","batchLabelsArray","idx","image","set","label","xs","tensor2d","labels","showExamples","surface","tfvis","visor","name","tab","examples","nextTestBatch","numExamples","shape","imageTensor","tidy","reshape","style","browser","toPixels","drawArea","appendChild","dispose","run","load","addEventListener"],"mappings":"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","file":"script.75da7f30.map","sourceRoot":"..","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\nconst IMAGE_SIZE = 784;\r\nconst NUM_CLASSES = 10;\r\nconst NUM_DATASET_ELEMENTS = 65000;\r\n\r\nconst TRAIN_TEST_RATIO = 5 / 6;\r\n\r\nconst NUM_TRAIN_ELEMENTS = Math.floor(TRAIN_TEST_RATIO * NUM_DATASET_ELEMENTS);\r\nconst NUM_TEST_ELEMENTS = NUM_DATASET_ELEMENTS - NUM_TRAIN_ELEMENTS;\r\n\r\nconst MNIST_IMAGES_SPRITE_PATH =\r\n    'https://storage.googleapis.com/learnjs-data/model-builder/mnist_images.png';\r\nconst MNIST_LABELS_PATH =\r\n    'https://storage.googleapis.com/learnjs-data/model-builder/mnist_labels_uint8';\r\n\r\n/**\r\n * A class that fetches the sprited MNIST dataset and returns shuffled batches.\r\n *\r\n * NOTE: This will get much easier. For now, we do data fetching and\r\n * manipulation manually.\r\n */\r\nexport class MnistData {\r\n  constructor() {\r\n    this.shuffledTrainIndex = 0;\r\n    this.shuffledTestIndex = 0;\r\n  }\r\n\r\n  async load() {\r\n    // Make a request for the MNIST sprited image.\r\n    const img = new Image();\r\n    const canvas = document.createElement('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n    const imgRequest = new Promise((resolve, reject) => {\r\n      img.crossOrigin = '';\r\n      img.onload = () => {\r\n        img.width = img.naturalWidth;\r\n        img.height = img.naturalHeight;\r\n\r\n        const datasetBytesBuffer =\r\n            new ArrayBuffer(NUM_DATASET_ELEMENTS * IMAGE_SIZE * 4);\r\n\r\n        const chunkSize = 5000;\r\n        canvas.width = img.width;\r\n        canvas.height = chunkSize;\r\n\r\n        for (let i = 0; i < NUM_DATASET_ELEMENTS / chunkSize; i++) {\r\n          const datasetBytesView = new Float32Array(\r\n              datasetBytesBuffer, i * IMAGE_SIZE * chunkSize * 4,\r\n              IMAGE_SIZE * chunkSize);\r\n          ctx.drawImage(\r\n              img, 0, i * chunkSize, img.width, chunkSize, 0, 0, img.width,\r\n              chunkSize);\r\n\r\n          const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n\r\n          for (let j = 0; j < imageData.data.length / 4; j++) {\r\n            // All channels hold an equal value since the image is grayscale, so\r\n            // just read the red channel.\r\n            datasetBytesView[j] = imageData.data[j * 4] / 255;\r\n          }\r\n        }\r\n        this.datasetImages = new Float32Array(datasetBytesBuffer);\r\n\r\n        resolve();\r\n      };\r\n      img.src = MNIST_IMAGES_SPRITE_PATH;\r\n    });\r\n\r\n    const labelsRequest = fetch(MNIST_LABELS_PATH);\r\n    const [imgResponse, labelsResponse] =\r\n        await Promise.all([imgRequest, labelsRequest]);\r\n\r\n    this.datasetLabels = new Uint8Array(await labelsResponse.arrayBuffer());\r\n\r\n    // Create shuffled indices into the train/test set for when we select a\r\n    // random dataset element for training / validation.\r\n    this.trainIndices = tf.util.createShuffledIndices(NUM_TRAIN_ELEMENTS);\r\n    this.testIndices = tf.util.createShuffledIndices(NUM_TEST_ELEMENTS);\r\n\r\n    // Slice the the images and labels into train and test sets.\r\n    this.trainImages =\r\n        this.datasetImages.slice(0, IMAGE_SIZE * NUM_TRAIN_ELEMENTS);\r\n    this.testImages = this.datasetImages.slice(IMAGE_SIZE * NUM_TRAIN_ELEMENTS);\r\n    this.trainLabels =\r\n        this.datasetLabels.slice(0, NUM_CLASSES * NUM_TRAIN_ELEMENTS);\r\n    this.testLabels =\r\n        this.datasetLabels.slice(NUM_CLASSES * NUM_TRAIN_ELEMENTS);\r\n  }\r\n\r\n  nextTrainBatch(batchSize) {\r\n    return this.nextBatch(\r\n        batchSize, [this.trainImages, this.trainLabels], () => {\r\n          this.shuffledTrainIndex =\r\n              (this.shuffledTrainIndex + 1) % this.trainIndices.length;\r\n          return this.trainIndices[this.shuffledTrainIndex];\r\n        });\r\n  }\r\n\r\n  nextTestBatch(batchSize) {\r\n    return this.nextBatch(batchSize, [this.testImages, this.testLabels], () => {\r\n      this.shuffledTestIndex =\r\n          (this.shuffledTestIndex + 1) % this.testIndices.length;\r\n      return this.testIndices[this.shuffledTestIndex];\r\n    });\r\n  }\r\n\r\n  nextBatch(batchSize, data, index) {\r\n    const batchImagesArray = new Float32Array(batchSize * IMAGE_SIZE);\r\n    const batchLabelsArray = new Uint8Array(batchSize * NUM_CLASSES);\r\n\r\n    for (let i = 0; i < batchSize; i++) {\r\n      const idx = index();\r\n\r\n      const image =\r\n          data[0].slice(idx * IMAGE_SIZE, idx * IMAGE_SIZE + IMAGE_SIZE);\r\n      batchImagesArray.set(image, i * IMAGE_SIZE);\r\n\r\n      const label =\r\n          data[1].slice(idx * NUM_CLASSES, idx * NUM_CLASSES + NUM_CLASSES);\r\n      batchLabelsArray.set(label, i * NUM_CLASSES);\r\n    }\r\n\r\n    const xs = tf.tensor2d(batchImagesArray, [batchSize, IMAGE_SIZE]);\r\n    const labels = tf.tensor2d(batchLabelsArray, [batchSize, NUM_CLASSES]);\r\n\r\n    return {xs, labels};\r\n  }\r\n}","import {MnistData} from './data.js';\r\n\r\nasync function showExamples(data) {\r\n  // Create a container in the visor\r\n  const surface =\r\n    tfvis.visor().surface({ name: 'Input Data Examples', tab: 'Input Data'});  \r\n\r\n  // Get the examples\r\n  const examples = data.nextTestBatch(20);\r\n  const numExamples = examples.xs.shape[0];\r\n  \r\n  // Create a canvas element to render each example\r\n  for (let i = 0; i < numExamples; i++) {\r\n    const imageTensor = tf.tidy(() => {\r\n      // Reshape the image to 28x28 px\r\n      return examples.xs\r\n        .slice([i, 0], [1, examples.xs.shape[1]])\r\n        .reshape([28, 28, 1]);\r\n    });\r\n    \r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = 28;\r\n    canvas.height = 28;\r\n    canvas.style = 'margin: 4px;';\r\n    await tf.browser.toPixels(imageTensor, canvas);\r\n    surface.drawArea.appendChild(canvas);\r\n\r\n    imageTensor.dispose();\r\n  }\r\n}\r\n\r\nasync function run() {  \r\n  const data = new MnistData();\r\n  await data.load();\r\n  await showExamples(data);\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', run);"]}